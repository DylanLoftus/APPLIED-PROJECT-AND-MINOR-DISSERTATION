# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class WeatherHistoryListing(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, area: str=None, dataset_num: int=None, start_time: int=None, length: int=None, link: str=None):  # noqa: E501
        """WeatherHistoryListing - a model defined in Swagger

        :param area: The area of this WeatherHistoryListing.  # noqa: E501
        :type area: str
        :param dataset_num: The dataset_num of this WeatherHistoryListing.  # noqa: E501
        :type dataset_num: int
        :param start_time: The start_time of this WeatherHistoryListing.  # noqa: E501
        :type start_time: int
        :param length: The length of this WeatherHistoryListing.  # noqa: E501
        :type length: int
        :param link: The link of this WeatherHistoryListing.  # noqa: E501
        :type link: str
        """
        self.swagger_types = {
            'area': str,
            'dataset_num': int,
            'start_time': int,
            'length': int,
            'link': str
        }

        self.attribute_map = {
            'area': 'area',
            'dataset_num': 'datasetNum',
            'start_time': 'startTime',
            'length': 'length',
            'link': 'link'
        }
        self._area = area
        self._dataset_num = dataset_num
        self._start_time = start_time
        self._length = length
        self._link = link

    @classmethod
    def from_dict(cls, dikt) -> 'WeatherHistoryListing':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The WeatherHistoryListing of this WeatherHistoryListing.  # noqa: E501
        :rtype: WeatherHistoryListing
        """
        return util.deserialize_model(dikt, cls)

    @property
    def area(self) -> str:
        """Gets the area of this WeatherHistoryListing.


        :return: The area of this WeatherHistoryListing.
        :rtype: str
        """
        return self._area

    @area.setter
    def area(self, area: str):
        """Sets the area of this WeatherHistoryListing.


        :param area: The area of this WeatherHistoryListing.
        :type area: str
        """
        if area is None:
            raise ValueError("Invalid value for `area`, must not be `None`")  # noqa: E501

        self._area = area

    @property
    def dataset_num(self) -> int:
        """Gets the dataset_num of this WeatherHistoryListing.


        :return: The dataset_num of this WeatherHistoryListing.
        :rtype: int
        """
        return self._dataset_num

    @dataset_num.setter
    def dataset_num(self, dataset_num: int):
        """Sets the dataset_num of this WeatherHistoryListing.


        :param dataset_num: The dataset_num of this WeatherHistoryListing.
        :type dataset_num: int
        """
        if dataset_num is None:
            raise ValueError("Invalid value for `dataset_num`, must not be `None`")  # noqa: E501

        self._dataset_num = dataset_num

    @property
    def start_time(self) -> int:
        """Gets the start_time of this WeatherHistoryListing.


        :return: The start_time of this WeatherHistoryListing.
        :rtype: int
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time: int):
        """Sets the start_time of this WeatherHistoryListing.


        :param start_time: The start_time of this WeatherHistoryListing.
        :type start_time: int
        """
        if start_time is None:
            raise ValueError("Invalid value for `start_time`, must not be `None`")  # noqa: E501

        self._start_time = start_time

    @property
    def length(self) -> int:
        """Gets the length of this WeatherHistoryListing.


        :return: The length of this WeatherHistoryListing.
        :rtype: int
        """
        return self._length

    @length.setter
    def length(self, length: int):
        """Sets the length of this WeatherHistoryListing.


        :param length: The length of this WeatherHistoryListing.
        :type length: int
        """
        if length is None:
            raise ValueError("Invalid value for `length`, must not be `None`")  # noqa: E501

        self._length = length

    @property
    def link(self) -> str:
        """Gets the link of this WeatherHistoryListing.


        :return: The link of this WeatherHistoryListing.
        :rtype: str
        """
        return self._link

    @link.setter
    def link(self, link: str):
        """Sets the link of this WeatherHistoryListing.


        :param link: The link of this WeatherHistoryListing.
        :type link: str
        """
        if link is None:
            raise ValueError("Invalid value for `link`, must not be `None`")  # noqa: E501

        self._link = link
